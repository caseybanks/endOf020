{"version":3,"sources":["DishForm.js","hooks/useOnClickOutside.js","hooks/bodyScrollLock.js","Toggle.js","App.js","hooks/useTitleInput.js","serviceWorker.js","index.js"],"names":["DishForm","_ref","setToggle","ref","useRef","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","useOnClickOutside","useLayoutEffect","originalOverflow","window","getComputedStyle","body","overflow","style","react_default","a","createElement","className","htmlFor","type","id","Toggle","_useState","useState","_useState2","Object","slicedToArray","isToggled","src_DishForm","onClick","App","_useTitleInput","initialValue","value","setValue","title","useDebugValue","length","useTitleInput","_useTitleInput2","name","setName","_useAbortableFetch","useAbortableFetch","data","props","loading","useSpring","opacity","from","web","h1","classList","add","src_Toggle","onSubmit","e","preventDefault","onChange","map","dish","desc","ingredients","ingredient","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96cd44a0.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport { useBodyScrollLock } from './hooks/bodyScrollLock';\nimport { useOnClickOutside } from './hooks/useOnClickOutside';\n\nconst DishForm = ({ setToggle }) => {\n  const ref = useRef();\n\n  useOnClickOutside(ref, () => setToggle(false));\n\n  useBodyScrollLock();\n  return (\n    <div className=\"dish-card\" ref={ref}>\n      <form>\n        <div className=\"form-row\">\n          <label htmlFor=\"name\">Name: </label>\n          <input type=\"text\" id=\"name\" />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default DishForm;\n","import { useEffect } from 'react';\n\nfunction useOnClickOutside(ref, handler) {\n  useEffect(() => {\n    const listener = event => {\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n      handler();\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, []);\n}\n\nexport { useOnClickOutside };\n","import { useLayoutEffect } from 'react';\n\nfunction useBodyScrollLock() {\n  useLayoutEffect(() => {\n    const originalOverflow = window.getComputedStyle(document.body).overflow;\n    document.body.style.overflow = 'hidden';\n\n    // You can do this too\n    // return function cleanup() {\n    return () => {\n      document.body.style.overflow = originalOverflow;\n    };\n  }, []);\n}\n\nexport { useBodyScrollLock };\n","import React, { useState } from 'react';\nimport DishForm from './DishForm';\n\nconst Toggle = () => {\n  const [isToggled, setToggle] = useState(false);\n  return (\n    <div>\n      {isToggled ? (\n        <DishForm setToggle={setToggle} />\n      ) : (\n        <button onClick={() => setToggle(!isToggled)}>Open</button>\n      )}\n    </div>\n  );\n};\n\nexport default Toggle;\n\n// import React, { Component } from 'react';\n\n// export default class Refactor extends Component {\n//   state = {\n//     isToggled: false\n//   };\n\n//   toggle = () => {\n//     this.setState(state => {\n//       return { isToggled: !state.isToggled };\n//     });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <button onClick={this.toggle}>Toggle</button>\n//         {this.state.isToggled && <h2>Hello!</h2>}\n//       </div>\n//     );\n//   }\n// }\n","import React, { useState, useEffect, useRef } from 'react';\nimport useAbortableFetch from 'use-abortable-fetch';\nimport { useSpring, animated } from 'react-spring';\nimport Toggle from './Toggle';\nimport { useTitleInput } from './hooks/useTitleInput';\n\nconst App = () => {\n  const [name, setName] = useTitleInput('');\n  const ref = useRef();\n\n  const { data, loading } = useAbortableFetch(\n    'https://my-json-server.typicode.com/leveluptuts/fakeapi/dishes'\n  );\n\n  const props = useSpring({ opacity: 1, from: { opacity: 0 } });\n  return (\n    <div className=\"main-wrapper\" ref={ref}>\n      <animated.h1\n        style={props}\n        onClick={() => ref.current.classList.add('new-fake-class')}\n      >\n        Level Up Dishes\n      </animated.h1>\n      <Toggle />\n\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n        }}\n      >\n        <input\n          type=\"text\"\n          onChange={e => setName(e.target.value)}\n          value={name}\n        />\n        <button>Submit</button>\n      </form>\n      {data &&\n        data.map(dish => (\n          <article className=\"dish-card dish-card--withImage\">\n            <h3>{dish.name}</h3>\n            <p>{dish.desc}</p>\n            <div className=\"ingredients\">\n              {dish.ingredients.map(ingredient => (\n                <span>{ingredient}</span>\n              ))}\n            </div>\n          </article>\n        ))}\n    </div>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useDebugValue } from 'react';\n\nfunction useTitleInput(initialValue) {\n  const [value, setValue] = useState(initialValue);\n  useEffect(() => {\n    document.title = value;\n  });\n  useDebugValue(value.length > 0 ? 'Full' : 'Empty');\n\n  return [value, setValue];\n}\n\nexport { useTitleInput };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}